# DATA-STRUCTURE

//doubly linked list

#include<stdio.h>
#include<stdlib.h>

struct node{
    struct node *pre;
    struct node *next;
    int data;
};
struct node *head;

void insertbeg();
void insertlast();
void insertrandom();
void delbeg();
void dellast();
void ramdomdel();
void display();

void insertbeg()
{
    struct node *ptr=malloc(sizeof(struct node));
    int item;
    if(ptr==NULL){
      printf("overflow");
      return;
    }
    else
    {
        if(head==NULL)
        {
                printf("enter the data:\n");
            scanf("%d",&item);
            ptr->data=item;
            ptr->pre=NULL;
            ptr->next=NULL;
            head=ptr;
        }
        else{    
      printf("enter the data:\n");
       scanf("%d",&item);
       ptr->data=item;
       ptr->pre=NULL;
       ptr->next=head;
       head->pre=ptr;
       head=ptr; 
        } 
        printf("node inserted:\n");
    }
}

void insertlast()
{
    struct node *ptr,*temp;
    ptr=malloc(sizeof(struct node));
     int item;
    if(ptr==NULL){
      printf("overflow");
      return;
    }
    else
    {
        if(head==NULL)
        {
                printf("enter the data:\n");
            scanf("%d",&item);
            ptr->data=item;
            ptr->pre=NULL;
            ptr->next=NULL;
            head=ptr;
        }
        else{    
      printf("enter the data:\n");
       scanf("%d",&item);
       ptr->data=item;
       temp=head;
       while (temp->next!=NULL)
       {
         temp=temp->next;
       }
        ptr->pre=temp->next;
        ptr->next=NULL;
        temp->next=ptr;
        } 
        printf("node inserted:\n");
    }
}

void insertrandom()
{
  struct node *ptr,*temp;
  int item,loc;
  ptr=malloc(sizeof(struct node));
  if (head==NULL)
  {
    printf("enter data:\n");
     scanf("%d",&item);
    ptr->pre=NULL;
    ptr->next=NULL;
    ptr->data=item;
    head=ptr;
  }
  else
  {
    temp=head;
    printf("enter the location and data to insert\n");
    scanf("%d %d",&loc,&item);
    ptr->data=item;
    for (int i = 1; i < loc; i++)
    {
      temp=temp->next;
    }
    ptr->pre=temp;
    ptr->next=temp->next;
    temp->next=ptr;
  }
  printf("node inserted!!");
  
}
void delbeg()
{
  struct node *ptr;
  ptr=head;
  if(head==NULL)
    printf("nothing to delete");
    else if (head->next==NULL)
    {
      head=NULL;
      free(head);
      printf("node deleted:\n");
    }
    else
    {
      head=head->next;
      head->pre=NULL;
      free(ptr);
      printf("\nnode deleted");
    } 
}
void dellast()
{
  struct node *ptr;
  if(head==NULL)
   printf("nothing to delete\n");
   else
   {
    ptr=head;
    while (ptr->next!=NULL)
    {
      ptr=ptr->next;
    }
    ptr->pre->next=NULL;
    free(ptr);
    printf("node deleted succefully\n");
   }
   
}
void ramdomdel()
{
  struct node *ptr;
  int loc;
  if(head==NULL)
    printf("list is empty:\n");
    else
    {
      ptr=head;
      printf("enter the location:\n");
       scanf("%d",&loc);
       for(int i=1;i<=loc;i++)
       {
        ptr=ptr->next;
       }
       ptr->pre->next=ptr->next;
       ptr->next->pre=ptr;
       free(ptr);
       printf("node deleted successfully:");
    }
    
}
void display()
{
  struct node *temp;
  temp=head;
  printf("printing the value:\n");
  while (temp!=NULL)
  {
    printf("%d\t",temp->data);
    temp=temp->next;
  }
}
void main()
{
    int choice=0;
    while(choice!=8)
    {
        printf("1.insert beginning\n2. insert last\n3. random insert\n4. delete beg\n5. delete last\n");
        printf("\n6.random delete\n7.print\n8.exit\n");
        printf("enter the choice:\n");
         scanf("%d",&choice);
         switch (choice)
         {
         case 1:
               insertbeg();
            break;
         case 2:
                insertlast();
                break;
         case 3:
                insertrandom();
                break; 
         case 4:
                delbeg();
                break;
         case 5:
                dellast();
                break; 
         case 6:
                ramdomdel();
                break;                         
         case 7:
                display();
                break;
         case 8:
                exit(0);              
         default:
                printf("enter valid choice!!\n");
         }
    }
}
