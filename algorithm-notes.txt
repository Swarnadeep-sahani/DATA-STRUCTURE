* 0-1 Knapsack problem

public class DP_Knapsack {  
    int findMaxValueOfKnapSack(int[] values, int[] weights, int W, int N) {
        int[][] cache = new int[N+1][W+1];

        for (int i = 0; i <= N; i++) {
            for (int w = 0; w <= W; w++) {
                if (i == 0 || w == 0) {
                    cache[i][w] = 0;
                }
                else if (weights[i-1] > w) {
                    cache[i][w] = cache[i-1][w];
                } else {
                    cache[i][w] = Math.max(cache[i-1][w], cache[i-1][w-weights[i-1]] + values[i-1]);
                }
            }
        }

        return cache[N][W];
    }

    public static void main(String[] args) {
        DP_Knapsack knapsack = new DP_Knapsack();
        int[] values = {60, 100, 120};
        int[] weights = {10, 20, 30};
        int weightLimit = 50;
        int noOfItems = values.length;
        System.out.println(knapsack.findMaxValueOfKnapSack(values, weights, weightLimit, noOfItems));
    }
}

* Longest possible palindrome substring--->


public class longest_p_substring {  
    static String findLongestPalindromicSubstring(String s) {
        if(s == null || s.isEmpty()) return "";

        String longestPalindrome = "";
        char[] charArr = s.toCharArray();
        for (int i = 0; i < charArr.length; i++) {
            for (int j = i; j < charArr.length; j++) {
                String substr = s.substring(i, j+1);
                if(isPalindrome(substr) && substr.length() > longestPalindrome.length()) {
                    longestPalindrome = substr;
                }
            }
        }

        return longestPalindrome;
    }

    static boolean isPalindrome(String s) {
        String reversedStr = new StringBuilder(s).reverse().toString();
        return s.equals(reversedStr);
    }

    public static void main(String[] args) {
        System.out.println(findLongestPalindromicSubstring("bananas"));
        System.out.println(findLongestPalindromicSubstring("bb"));
        System.out.println(findLongestPalindromicSubstring("a"));
    }
}

* Smallest Missing Positive Integer

//using sorting technique(Time comp. =O(nlogn), Space comp.=O(1))

import java.util.Arrays;

public class SmallestMissingPositiveNumberBySorting {  
    public static int findSmallest(int[] a) {
        Arrays.sort(a);
        int min = 1;

        for (int i = 0; i < a.length; i++) {
            if (min == a[i]) {
                min++;
            }
        }

        return min;
    }

    public static void main(String[] args) {
        System.out.println(findSmallest(new int[]{1, 3, 6, 4, 1, 2}));
        System.out.println(findSmallest(new int[]{-1, -3, 5}));
    }
}

//using hash table:(time=O(n) space=O(n))

import java.util.Arrays;  
import java.util.HashSet;

public class SmallestMissingPositiveNumberByHashtable {  
    public static int findSmallest(int[] a) {
        HashSet<Integer> hashSet = new HashSet<>();

        for (int value : a) {
            if (value > 0) {
                hashSet.add(value);
            }
        }

        int min = 1;
        while (hashSet.contains(min)) {
            min++;
        }

        return min;
    }

    public static void main(String[] args) {
        System.out.println(findSmallest(new int[]{1, 3, 6, 4, 1, 2}));
        System.out.println(findSmallest(new int[]{-1, -3, 5}));
    }
}

* Reverse Words in a String- eg: Input: "Hello Koding"

                                 Output: "Koding Hello"
In Java, the trim() method is used to remove whitespace from both the beginning and end of a string.

public class ReverseWordsBySplittingAndIterative {  
    static String reverseWords(String s) {
        StringBuilder result = new StringBuilder();

        String[] words = s.split(" ");
        for (int i = words.length - 1; i >= 0; i--) {
            if (!words[i].isEmpty()) {
                result.append(words[i]).append(" ");
            }
        }
        return result.toString().trim();
    }

    public static void main(String[] args) {
        System.out.println(reverseWords("Hello  Koding"));
        System.out.println(reverseWords(" Live on time, emit no evil "));
    }
}

